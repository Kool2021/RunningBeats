import { NextRequest, NextResponse } from 'next/server';
import { TrackData } from '@/types';
import { chunkArray } from '@/lib/spotify';

export async function POST(request: NextRequest) {
  try {
    const { name, tracks }: { name: string; tracks: TrackData[] } = await request.json();

    const accessToken = request.cookies.get('spotify_access_token')?.value;
    
    if (!accessToken) {
      return NextResponse.json(
        { error: 'Not authenticated' },
        { status: 401 }
      );
    }

    const userResponse = await fetch('https://api.spotify.com/v1/me', {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
      },
    });

    if (!userResponse.ok) {
      return NextResponse.json(
        { error: 'Failed to get user profile' },
        { status: 400 }
      );
    }

    const userData = await userResponse.json();
    const userId = userData.id;

    const createPlaylistResponse = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name,
        description: 'Generated by Runner\'s Pace Music Generator - perfectly matched to your running cadence!',
        public: false,
      }),
    });

    if (!createPlaylistResponse.ok) {
      const errorData = await createPlaylistResponse.json();
      console.error('Create playlist error:', errorData);
      return NextResponse.json(
        { error: 'Failed to create playlist' },
        { status: 400 }
      );
    }

    const playlistData = await createPlaylistResponse.json();
    const playlistId = playlistData.id;

    const trackUris = tracks.map(track => `spotify:track:${track.id}`);
    const chunks = chunkArray(trackUris, 100);
    
    for (const chunk of chunks) {
      const addTracksResponse = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          uris: chunk,
        }),
      });

      if (!addTracksResponse.ok) {
        console.error('Failed to add tracks to playlist');
      }
    }

    return NextResponse.json({
      success: true,
      playlist: {
        id: playlistId,
        name: playlistData.name,
        url: playlistData.external_urls.spotify,
      },
    });

  } catch (error) {
    console.error('Create playlist error:', error);
    return NextResponse.json(
      { error: 'Failed to create playlist' },
      { status: 500 }
    );
  }
}


